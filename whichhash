#!/bin/bash

# Slightly stolen from stackoverflow
_combo() { python -c "import sys, itertools; a=sys.argv[1:]; print '\n'.join('\n'.join(''.join(str(i) for i in c) for c in itertools.permutations(a, i)) for i in range(1, len(a)+1))" "$@"; }

_combo_adv() { python -c "import sys, itertools; a=sys.argv[1:]; print '\n'.join('\n'.join(delim.join(str(i) for i in c) for c in itertools.permutations(a, i)) for i in range(1, len(a)+1) for delim in ['', '+'])" "$@"; }

_find_hash() {
    target=$1
    shift
    perms="$(_combo_adv $@)"
    for p in $perms; do
	echo "Trying permutation $p"
	sha1hash=$(printf "$p" | shasum | cut -d' ' -f1)
	sha256hash=$(printf "$p" | shasum -a 256 | cut -d' ' -f1)
	sha512hash=$(printf "$p" | shasum -a 512 | cut -d' ' -f1)
	md5hash=$(printf "$p" | md5sum | cut -d' ' -f1)
	case $target in
	    $sha1hash) echo "sha1 hash of $p matches!"; return;;
	    $sha256hash) echo "sha256 hash of $p matches!"; return;;
	    $sha512hash) echo "sha512 hash of $p matches!"; return;;
	    $md5hash) echo "md5 hash of $p matches!"; return;;
	esac
    done
}


whichhash() {
    if [[ ${#@} -eq 0 ]]; then
	cat <<EOF
#     #                        #     #                      
#  #  # #    # #  ####  #    # #     #   ##    ####  #    # 
#  #  # #    # # #    # #    # #     #  #  #  #      #    # 
#  #  # ###### # #      ###### ####### #    #  ####  ###### 
#  #  # #    # # #      #    # #     # ######      # #    # 
#  #  # #    # # #    # #    # #     # #    # #    # #    # 
 ## ##  #    # #  ####  #    # #     # #    #  ####  #    # 

Tries to find hashes that match different permutations of information you find.
Type 'done' when you've entered all of your information.
EOF
	read -p "Target hash: " args
	while [[ $uin != 'done' ]]; do
	    read -p "Piece of information: " uin
	    if [[ $uin != 'done' ]]; then
		args="$args $uin"
	    fi
	done
	_find_hash $args
    else
	_find_hash $@
    fi
}

# If script is sourced, just load functions
# Otherwise run interactively
([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] || 
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
    printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] || 
 [[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)) && sourced=1 || sourced=0
if [[ $sourced -eq 0 ]]; then whichhash $@; fi
